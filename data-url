data:text/html;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPnJ0b3AgLSBCcm93c2UgdGhlIHRvcCBpbWFnZXMgJiB2aWRlb3Mgb24gYW55IHN1YnJlZGRpdDwvdGl0bGU+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4KICAgIDxzdHlsZT5odG1sLCBib2R5LCBkaXYsIGgxLCBoMiwgaW1nIHsgCiAgbWFyZ2luOiAwOyAKICBwYWRkaW5nOiAwOyAKICBib3JkZXI6IDA7IAogIGZvbnQtc2l6ZTogMTAwJTsgCiAgZm9udDogaW5oZXJpdDsgCiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAKfQpodG1sIHsgCiAgYmFja2dyb3VuZDogIzFkMWQxZTsKICBjb2xvcjogd2hpdGU7CiAgZm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7Cn0KLnBvc3QgeyAKICBkaXNwbGF5OiBub25lOyAKICBsaW5lLWhlaWdodDogMTsKICBoZWlnaHQ6IDEwMHZoOwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgcGFkZGluZzogOHB4IDcwcHggMTNweCA3MHB4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQouaGVhZGVyIHsgCiAgbWFyZ2luLWJvdHRvbTogMTBweDsgCiAgei1pbmRleDogMTsgCn0KLmhlYWRlciBhIHsKICBmb250LXNpemU6IDIwcHg7CiAgZm9udC13ZWlnaHQ6IDUwMDsKICBjb2xvcjogd2hpdGU7CiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAKfQouaGVhZGVyIGgxIHsKICBmb250LXNpemU6IDE0cHg7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBvcGFjaXR5OiAwLjM7CiAgbWFyZ2luLXRvcDogNXB4OyAKfQouaGVhZGVyIGgxIGEgewogIGZvbnQtc2l6ZTogMTRweDsKICBmb250LXdlaWdodDogNDAwOyAKfQouaGVhZGVyIGgxIGE6aG92ZXIgewogIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAKfQoubWVkaWEtY29udGFpbmVyIHsKICBmbGV4LWdyb3c6IDE7CiAgaGVpZ2h0OiAwOwogIHdpZHRoOiAxMDAlOwogIHVzZXItc2VsZWN0OiBub25lOyAKICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOyAKfQoubWVkaWEgewogIG1heC1oZWlnaHQ6IDEwMCU7CiAgbWF4LXdpZHRoOiAxMDAlOwogIGRpc3BsYXk6IGJsb2NrOwogIG1hcmdpbjogYXV0bzsKICBib3JkZXItcmFkaXVzOiA1cHg7CiAgbWluLWhlaWdodDogNTBweDsgCn0KLm1lZGlhLWNvbnRhaW5lciBpbWcgewogIGJhY2tncm91bmQ6IHVybCgnZGF0YTppbWFnZS9zdmcreG1sLDxzdmcgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIiB2aWV3Qm94PSIwIDAgMjQgMjQiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZmlsbD0id2hpdGUiIGQ9Ik0xMC4xNCwxLjE2YTExLDExLDAsMCwwLTksOC45MkExLjU5LDEuNTksMCwwLDAsMi40NiwxMiwxLjUyLDEuNTIsMCwwLDAsNC4xMSwxMC43YTgsOCwwLDAsMSw2LjY2LTYuNjFBMS40MiwxLjQyLDAsMCwwLDEyLDIuNjloMEExLjU3LDEuNTcsMCwwLDAsMTAuMTQsMS4xNloiPjxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9InRyYW5zZm9ybSIgdHlwZT0icm90YXRlIiBmcm9tPSIwIDEyIDEyIiB0bz0iMzYwIDEyIDEyIiBkdXI9IjAuNzVzIiByZXBlYXRDb3VudD0iaW5kZWZpbml0ZSIvPjwvcGF0aD48L3N2Zz4nKSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDsKfQouYWN0aXZlIHsKICBkaXNwbGF5OiBmbGV4Owp9Ci5zdmctYnV0dG9uIHsKICBvcGFjaXR5OiAwLjM7CiAgdHJhbnNpdGlvbjogMC4yczsKfQouc3ZnLWJ1dHRvbjpob3ZlciB7CiAgb3BhY2l0eTogMC41OwogIGN1cnNvcjogcG9pbnRlcjsKfQoucHJldi1idXR0b24sIC5uZXh0LWJ1dHRvbiB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICB3aWR0aDogNzBweDsKICBoZWlnaHQ6IDEwMHB4OwogIHRvcDogNTAlOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsKICBib3JkZXItcmFkaXVzOiAxM3B4OwogIHotaW5kZXg6IDI7IAogIHVzZXItc2VsZWN0OiBub25lOwogIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7Cn0KLnByZXYtYnV0dG9uIHsKICBsZWZ0OiAwOwp9Ci5uZXh0LWJ1dHRvbiB7CiAgcmlnaHQ6IDA7Cn0KLmhpZGRlbiB7CiAgZGlzcGxheTogbm9uZTsgCn0KLmNvdW50ZXItY29udGFpbmVyIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgYm90dG9tOiA5cHg7CiAgcmlnaHQ6IDExcHg7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGFsaWduLWl0ZW1zOiBlbmQ7IAogIHBhZGRpbmc6IDVweDsKICBib3JkZXItcmFkaXVzOiAxM3B4OwogIHotaW5kZXg6IDI7Cn0gCi5mZXRjaC1zcGlubmVyIHsKICBmaWxsOiB3aGl0ZTsKICBvcGFjaXR5OiAwLjM7CiAgcGFkZGluZy1ib3R0b206IDFweDsgCiAgbWFyZ2luLXJpZ2h0OiA4cHg7IAp9IAouaW5wdXQtc3Bpbm5lciB7CiAgZGlzcGxheTogbm9uZTsKICBmaWxsOiB3aGl0ZTsKICBhbmltYXRpb246IHNwaW5uZXItYW5pbWF0aW9uIC43NXMgaW5maW5pdGUgbGluZWFyOyAKfQouY291bnRlciB7CiAgZm9udC1zaXplOiAxNHB4OwogIG9wYWNpdHk6IDAuMzsKICBtYXJnaW46IDA7CiAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKICB6LWluZGV4OiAyOwp9Ci5uc2Z3IC5tZWRpYSB7CiAgZmlsdGVyOiBicmlnaHRuZXNzKDIwJSkgYmx1cigzNXB4KTsKfQoubnNmdyAubnNmdy1iYW5uZXIgewogIGRpc3BsYXk6IGZsZXg7Cn0KLm5zZnctYmFubmVyIHsKICBkaXNwbGF5OiBub25lOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBsZWZ0OiAwOwogIHRvcDogMDsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIHotaW5kZXg6IDE7IAp9Ci5uc2Z3LWJhbm5lciBoMSB7CiAgbWFyZ2luLWJvdHRvbTogMTFweDsgCn0KLm5zZnctYmFubmVyIGJ1dHRvbiB7CiAgZm9udC1zaXplOiAxMnB4OyAKfQouZmV0Y2gtc3Bpbm5lciBwYXRoIHsKICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7CiAgYW5pbWF0aW9uOiBzcGlubmVyLWFuaW1hdGlvbiAuNzVzIGluZmluaXRlIGxpbmVhcjsgCn0gCkBrZXlmcmFtZXMgc3Bpbm5lci1hbmltYXRpb24gewogIDEwMCUgewogICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsKICB9ICAKfQouaG9tZSB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBsZWZ0OiAwOwogIHRvcDogMDsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgei1pbmRleDogMTAwMDsKICBiYWNrZ3JvdW5kOiByZ2JhKDMwLCAzMCwgMzEsIDAuNzUpOwogIGJhY2tkcm9wLWZpbHRlcjogYmx1cigzNXB4KTsKICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigzNXB4KTsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyAKfQouY2xvc2UtYnV0dG9uIHsKICBkaXNwbGF5OiBub25lOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDogMzJweDsKICBoZWlnaHQ6IDMycHg7CiAgcGFkZGluZzogMTBweDsKICBsZWZ0OiAxMHB4OwogIHRvcDogNHB4OwogIHotaW5kZXg6IDI7Cn0gCi5ob21lLWVycm9yIHsKICBkaXNwbGF5OiBub25lOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDE4OXB4OwogIHBhZGRpbmc6IDExcHg7CiAgYm9yZGVyLXJhZGl1czogNHB4OwogIG1hcmdpbi10b3A6IDI1cHg7CiAgYmFja2dyb3VuZDogIzYzMWYxZDsKICBtYXJnaW4tYm90dG9tOiAwOyAKfQouaG9tZS1hcmVhIHsKICBkaXNwbGF5OiBub25lOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7IAp9Ci5pbnB1dC1jb250YWluZXIgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBib3JkZXI6IDRweCBzb2xpZCB3aGl0ZTsKICBiYWNrZ3JvdW5kOiB3aGl0ZTsgCn0KLmlucHV0LWNvbnRhaW5lcjpmb2N1cy13aXRoaW4gewogIG91dGxpbmU6IDNweCBzb2xpZCByZ2IoMzEsIDU2LCAxMTYpOyAKfQouc3VicmVkZGl0LWlucHV0IHsKICBib3JkZXI6IG5vbmU7CiAgd2lkdGg6IDI1MHB4OwogIGZvbnQtc2l6ZTogMThweDsKICBwYWRkaW5nOiAwIDdweDsKICBvdXRsaW5lOiBub25lOyAKfQouaW5wdXQtYnV0dG9uIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgYm9yZGVyOiBub25lOwogIGJvcmRlci1yYWRpdXM6IDJweDsKICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICB3aWR0aDogMzdweDsKICBoZWlnaHQ6IDM3cHg7IAp9Ci5pbnB1dC1idXR0b246aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsgCn0KLmlucHV0LWFycm93IHsKICBvcGFjaXR5OiAwLjM7IAp9Ci5ibHVlLWJ1dHRvbiB7CiAgYmFja2dyb3VuZDogcmdiKDcyLCAxMTksIDIzMCk7IAp9Ci5ibHVlLWJ1dHRvbiBzdmcgewogIG9wYWNpdHk6IDE7IAp9Ci5ibHVlLWJ1dHRvbiBwYXRoIHsKICBzdHJva2U6IHdoaXRlOyAKfQouZ2l0aHViLWljb24sIC5ob21lLWJ1dHRvbiB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHBhZGRpbmc6IDEwcHg7Cn0KLmdpdGh1Yi1pY29uIHsKICB3aWR0aDogMjhweDsKICBoZWlnaHQ6IDI4cHg7CiAgdG9wOiAxMHB4OwogIHJpZ2h0OiAxNXB4OwogIHotaW5kZXg6IDI7Cn0KLmhvbWUtYnV0dG9uIHsKICB3aWR0aDogMzFweDsKICBoZWlnaHQ6IDMxcHg7CiAgdG9wOiA2cHg7CiAgbGVmdDogMTNweDsKICB6LWluZGV4OiAyOyAKICBib3JkZXItcmFkaXVzOiAxM3B4Owp9Ci5ob21lLXBvcHVwIHsKICBkaXNwbGF5OiBmbGV4OwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB3aWR0aDogMzgwcHg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBib3JkZXItcmFkaXVzOiAxMHB4OwogIHBhZGRpbmc6IDE1cHg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICB6LWluZGV4OiAxOyAKICBwYWRkaW5nLWJvdHRvbTogNTVweDsKfQoucGFzdC1tZW51IHsKICBtYXJnaW4tdG9wOiAyNXB4OyAKICBmb250LXNpemU6IDE0cHg7IAogIGFwcGVhcmFuY2U6IG1lbnVsaXN0LWJ1dHRvbjsKfQoubG9nbyB7CiAgbWFyZ2luLWJvdHRvbTogOHB4OyAKICBmb250LXNpemU6IDIycHg7Cn0KLmRlc2NyaXB0aW9uIHsKICBtYXJnaW4tYm90dG9tOiAyNXB4OyAKICBvcGFjaXR5OiAwLjc7CiAgZm9udC1zaXplOiAxN3B4Owp9Cm5vc2NyaXB0IHsKICBkaXNwbGF5OiBmbGV4OwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBiYWNrZ3JvdW5kOiAjMWQxZDFlOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB6LWluZGV4OiAxMjM0NTY7Cn0Kbm9zY3JpcHQgc3BhbiB7CiAgbWFyZ2luOiBhdXRvOwp9Cjwvc3R5bGU+CiAgICA8c2NyaXB0PmZ1bmN0aW9uIGNyZWF0ZVBvc3QoewogIHRpdGxlLCAKICBkb21haW4sIAogIHRpbWVBZ28sIAogIGdhbGxlcnlDb3VudGVyLCAKICByZWRkaXRVUkwsIAogIG1lZGlhVVJMLCAKICBwb3N0ZXJVUkwsCiAgaXNWaWRlbywgCiAgdmlkZW9IZWlnaHQsIAogIG92ZXIxOCAKfSkgewogIGxldCBwb3N0RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoKICBwb3N0RWxlbS5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz0icG9zdCAke292ZXIxOCA/ICdvdmVyMTgnIDogJyd9Ij4KICAgIDxkaXYgY2xhc3M9ImhlYWRlciI+CiAgICAgIDxhIGhyZWY9IiR7cmVkZGl0VVJMfSI+JHt0aXRsZX08L2E+CiAgICAgIDxoMT4ke3RpbWVBZ299ICg8YSBocmVmPSIke21lZGlhVVJMfSI+JHtkb21haW59PC9hPiR7Z2FsbGVyeUNvdW50ZXJ9KTwvaDE+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im1lZGlhLWNvbnRhaW5lciI+CiAgICAgICR7aXNWaWRlbyAKICAgICAgICA/IGA8dmlkZW8gZGF0YS1zcmM9IiR7bWVkaWFVUkx9IiBwb3N0ZXI9IiR7cG9zdGVyVVJMfSIgaGVpZ2h0PSIke3ZpZGVvSGVpZ2h0fSIgcHJlbG9hZD0ibm9uZSIgY2xhc3M9Im1lZGlhIiBwbGF5c2lubGluZSBjb250cm9scyBsb29wPmAKICAgICAgICA6IGA8aW1nIGRhdGEtc3JjPSIke21lZGlhVVJMfSIgY2xhc3M9Im1lZGlhIj5gCiAgICAgICB9CiAgICA8L2Rpdj4KICA8L2Rpdj5gOwoKICByZXR1cm4gcG9zdEVsZW0uZmlyc3RDaGlsZDsKfQoKCgovLyBjb252ZXJ0IGFuIGFycmF5IG9mIEpTT04gcmVkZGl0IHBvc3QgZGF0YSBpbnRvIGFuIGFycmF5IG9mIHBvc3QgZWxlbWVudHMKZnVuY3Rpb24gY3JlYXRlUG9zdHMoY2hpbGRyZW4pIHsKICBsZXQgbmV3UG9zdHMgPSBbXTsKICBsZXQgb3BlbkNvdW50ID0gMDsKICAKICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICBsZXQgcG9zdERhdGEgPSBjaGlsZHJlbltpXS5kYXRhOwoKICAgIC8vIGxvYWQgY3Jvc3Nwb3N0CiAgICBjb25zdCBjcm9zc3Bvc3RQYXJlbnRMaXN0ID0gcG9zdERhdGEuY3Jvc3Nwb3N0X3BhcmVudF9saXN0OwogICAgaWYgKGNyb3NzcG9zdFBhcmVudExpc3QgJiYgY3Jvc3Nwb3N0UGFyZW50TGlzdC5sZW5ndGggPiAwKSB7CiAgICAgIHBvc3REYXRhID0gY3Jvc3Nwb3N0UGFyZW50TGlzdFswXTsKICAgIH0KICAgIAogICAgY29uc3QgdGl0bGUgPSBwb3N0RGF0YS50aXRsZTsKICAgIGxldCBkb21haW4gPSBwb3N0RGF0YS5kb21haW47CiAgICAKICAgIGNvbnN0IHRpbWVBZ28gPSB0aW1lQWdvU3RyKG5ldyBEYXRlKCkgLSBuZXcgRGF0ZShwb3N0RGF0YS5jcmVhdGVkX3V0YyAqIDEwMDApKTsKICAgIAogICAgY29uc3QgcmVkZGl0VVJMID0gJ2h0dHBzOi8vb2xkLnJlZGRpdC5jb20nICsgcG9zdERhdGEucGVybWFsaW5rOwogICAgbGV0IG1lZGlhVVJMID0gcG9zdERhdGEudXJsOwogICAgbGV0IHBvc3RlclVSTCA9ICcnOwoKICAgIGxldCBpc1ZpZGVvID0gZmFsc2U7CiAgICBsZXQgdmlkZW9IZWlnaHQgPSAwOwoKICAgIGNvbnN0IG92ZXIxOCA9IHBvc3REYXRhLm92ZXJfMTg7CgogICAgLy8gcmVkZGl0L2ltZ3VyIGltYWdlCiAgICBpZiAoZG9tYWluID09PSAnaS5yZWRkLml0JyB8fCAoZG9tYWluID09PSAnaS5pbWd1ci5jb20nICYmIG1lZGlhVVJMLnNsaWNlKC01KSAhPT0gJy5naWZ2JykpIHsKICAgICAgLy8gbm90aGluZyB0byBkbyBoZXJlCiAgICB9CiAgICAvLyByZWRkaXQgZ2FsbGVyeQogICAgZWxzZSBpZiAoZG9tYWluID09PSAncmVkZGl0LmNvbScpIHsKICAgICAgY29uc3QgZ2FsbGVyeURhdGEgPSBwb3N0RGF0YS5nYWxsZXJ5X2RhdGE7CiAgICAgIGlmICghZ2FsbGVyeURhdGEgfHwgIWdhbGxlcnlEYXRhLml0ZW1zKSB7CiAgICAgICAgY29uc29sZS53YXJuKGBXYXJuaW5nOiBnYWxsZXJ5IG5vdCBmb3VuZCwgc2tpcHBpbmcgJyR7dGl0bGV9JyAtICR7cmVkZGl0VVJMfVxuYCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIGNvbnN0IGdhbGxlcnlJdGVtcyA9IGdhbGxlcnlEYXRhLml0ZW1zOwogICAgICBjb25zdCBudW1JdGVtcyA9IGdhbGxlcnlJdGVtcy5sZW5ndGg7CgogICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bUl0ZW1zOyBqKyspIHsKICAgICAgICBjb25zdCBpdGVtID0gZ2FsbGVyeUl0ZW1zW2pdOwogICAgICAgIGNvbnN0IG1lZGlhSUQgPSBpdGVtLm1lZGlhX2lkOwoKICAgICAgICBjb25zdCBtaW1lVHlwZSA9IHBvc3REYXRhLm1lZGlhX21ldGFkYXRhW21lZGlhSURdLm07CiAgICAgICAgaWYgKCFtaW1lVHlwZSkgewogICAgICAgICAgY29uc29sZS53YXJuKGBXYXJuaW5nOiBnYWxsZXJ5IHBvc3QgJHtqKzF9LyR7bnVtSXRlbXN9OiBpbWFnZSBub3QgZm91bmQsIHNraXBwaW5nIGltYWdlIGluIGdhbGxlcnkgJyR7dGl0bGV9JyAtICR7cmVkZGl0VVJMfVxuYCk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGV4dCA9IG1pbWVUeXBlLnNwbGl0KCcvJykucG9wKCk7CiAgICAgICAgbWVkaWFVUkwgPSBgaHR0cHM6Ly9pLnJlZGQuaXQvJHttZWRpYUlEfS4ke2V4dH1gOwoKICAgICAgICBjb25zdCBwb3N0RWxlbSA9IGNyZWF0ZVBvc3QoeyAKICAgICAgICAgIHRpdGxlOiBpdGVtLmNhcHRpb24gPyBgJHt0aXRsZX06ICR7aXRlbS5jYXB0aW9ufWAgOiB0aXRsZSwKICAgICAgICAgIGRvbWFpbjogZG9tYWluLAogICAgICAgICAgdGltZUFnbzogdGltZUFnbywKICAgICAgICAgIHJlZGRpdFVSTDogcmVkZGl0VVJMLAogICAgICAgICAgbWVkaWFVUkw6IG1lZGlhVVJMLAogICAgICAgICAgcG9zdGVyVVJMOiAnJywKICAgICAgICAgIGlzVmlkZW86IGZhbHNlLAogICAgICAgICAgdmlkZW9IZWlnaHQ6IDAsCiAgICAgICAgICBnYWxsZXJ5Q291bnRlcjogYCwgaW1hZ2UgJHtqKzF9LyR7bnVtSXRlbXN9YCwKICAgICAgICAgIG92ZXIxODogb3ZlcjE4CiAgICAgICAgfSk7CiAgICAgICAgbmV3UG9zdHMucHVzaChwb3N0RWxlbSk7CiAgICAgIH0KICAgICAgb3BlbkNvdW50Kys7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgLy8gcmVkZGl0IHZpZGVvCiAgICBlbHNlIGlmIChkb21haW4gPT09ICd2LnJlZGQuaXQnKSB7CiAgICAgIGNvbnN0IHNlY3VyZU1lZGlhID0gcG9zdERhdGEuc2VjdXJlX21lZGlhOwogICAgICBpZiAoIXNlY3VyZU1lZGlhIHx8ICFzZWN1cmVNZWRpYS5yZWRkaXRfdmlkZW8pIHsKICAgICAgICBjb25zb2xlLndhcm4oYFdhcm5pbmc6IHZpZGVvIG5vdCBmb3VuZCwgc2tpcHBpbmcgJyR7dGl0bGV9JyAtICR7cmVkZGl0VVJMfVxuYCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgY29uc3QgcmVkZGl0VmlkZW8gPSBzZWN1cmVNZWRpYS5yZWRkaXRfdmlkZW87CgogICAgICBtZWRpYVVSTCA9IHJlZGRpdFZpZGVvLmhsc191cmw7CiAgICAgIGlmICghbWVkaWFVUkwpIHsKICAgICAgICBjb25zb2xlLndhcm4oYFdhcm5pbmc6IEhMUyB2aWRlbyBVUkwgbm90IGZvdW5kLCBza2lwcGluZyAnJHt0aXRsZX0nIC0gJHtyZWRkaXRVUkx9XG5gKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgaWYgKHBvc3REYXRhLnByZXZpZXcgJiYgcG9zdERhdGEucHJldmlldy5pbWFnZXMgJiYgcG9zdERhdGEucHJldmlldy5pbWFnZXNbMF0uc291cmNlKSB7CiAgICAgICAgcG9zdGVyVVJMID0gcG9zdERhdGEucHJldmlldy5pbWFnZXNbMF0uc291cmNlLnVybDsKICAgICAgfQoKICAgICAgbWVkaWFVUkwgPSBtZWRpYVVSTC5zcGxpdCgnPycpWzBdOyAgICAgIC8vIHJlbW92ZSB0cmFja2luZwogICAgICBpc1ZpZGVvID0gdHJ1ZTsKICAgICAgdmlkZW9IZWlnaHQgPSByZWRkaXRWaWRlby5oZWlnaHQ7CiAgICB9CiAgICAvLyB2aWRlbyBmYWxsYmFjawogICAgLy8gb3B0aW9uYWwgY2hhaW5pbmcgd291bGQgYmUgZ29vZCBoZXJlLCBidXQgYnJvd3NlciBjb21wYXRpYmlsaXR5IGlzbid0IGdyZWF0CiAgICBlbHNlIGlmICgKICAgICAgcG9zdERhdGEucHJldmlldyAmJiAKICAgICAgcG9zdERhdGEucHJldmlldy5yZWRkaXRfdmlkZW9fcHJldmlldyAmJiAKICAgICAgcG9zdERhdGEucHJldmlldy5yZWRkaXRfdmlkZW9fcHJldmlldy5obHNfdXJsCiAgICApIHsKICAgICAgY29uc3QgcmVkZGl0VmlkZW9QcmV2aWV3ID0gcG9zdERhdGEucHJldmlldy5yZWRkaXRfdmlkZW9fcHJldmlldzsKCiAgICAgIG1lZGlhVVJMID0gcmVkZGl0VmlkZW9QcmV2aWV3Lmhsc191cmwuc3BsaXQoJz8nKVswXTsgICAgLy8gcmVtb3ZlIHRyYWNraW5nCiAgICAgIHBvc3RlclVSTCA9IHBvc3REYXRhLnByZXZpZXcuaW1hZ2VzWzBdLnNvdXJjZS51cmw7CiAgICAgIGlzVmlkZW8gPSB0cnVlOwogICAgICB2aWRlb0hlaWdodCA9IHJlZGRpdFZpZGVvUHJldmlldy5oZWlnaHQ7CiAgICAgIGRvbWFpbiA9IG5ldyBVUkwobWVkaWFVUkwpLmhvc3RuYW1lOwogICAgfQogICAgLy8gaW1hZ2UgZmFsbGJhY2sKICAgIGVsc2UgaWYgKAogICAgICBwb3N0RGF0YS5wcmV2aWV3ICYmIAogICAgICBwb3N0RGF0YS5wcmV2aWV3LmltYWdlcyAmJiAKICAgICAgcG9zdERhdGEucHJldmlldy5pbWFnZXNbMF0gJiYgCiAgICAgIHBvc3REYXRhLnByZXZpZXcuaW1hZ2VzWzBdLnNvdXJjZSAmJiAKICAgICAgcG9zdERhdGEucHJldmlldy5pbWFnZXNbMF0uc291cmNlLnVybAogICAgKSB7CiAgICAgIG1lZGlhVVJMID0gcG9zdERhdGEucHJldmlldy5pbWFnZXNbMF0uc291cmNlLnVybDsKICAgICAgZG9tYWluID0gbmV3IFVSTChtZWRpYVVSTCkuaG9zdG5hbWU7CiAgICB9CiAgICBlbHNlIHsKICAgICAgY29uc29sZS53YXJuKGBXYXJuaW5nOiBpbnZhbGlkIGRvbWFpbiAnJHtkb21haW59Jywgc2tpcHBpbmcgJyR7dGl0bGV9JyAtICR7cmVkZGl0VVJMfVxuYCk7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIGNvbnN0IHBvc3RFbGVtID0gY3JlYXRlUG9zdCh7IAogICAgICB0aXRsZTogdGl0bGUsCiAgICAgIGRvbWFpbjogZG9tYWluLAogICAgICB0aW1lQWdvOiB0aW1lQWdvLAogICAgICByZWRkaXRVUkw6IHJlZGRpdFVSTCwKICAgICAgbWVkaWFVUkw6IG1lZGlhVVJMLAogICAgICBwb3N0ZXJVUkw6IHBvc3RlclVSTCwKICAgICAgaXNWaWRlbzogaXNWaWRlbywKICAgICAgdmlkZW9IZWlnaHQ6IHZpZGVvSGVpZ2h0LAogICAgICBnYWxsZXJ5Q291bnRlcjogJycsCiAgICAgIG92ZXIxODogb3ZlcjE4CiAgICB9KTsKCiAgICBuZXdQb3N0cy5wdXNoKHBvc3RFbGVtKTsKICAgIG9wZW5Db3VudCsrOwogIH0KICBjb25zb2xlLmxvZyhgT3BlbmVkICR7b3BlbkNvdW50fS8ke2NoaWxkcmVuLmxlbmd0aH0gcG9zdHNgKTsKCiAgcmV0dXJuIG5ld1Bvc3RzOwp9CgoKCmZ1bmN0aW9uIHRpbWVBZ29TdHIoZGVsdGEpIHsKICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcihkZWx0YSAvIDEwMDApOwoKICBpZiAoc2Vjb25kcyA8IDYwKSB7CiAgICByZXR1cm4gJ2p1c3Qgbm93JzsKICB9CiAgaWYgKHNlY29uZHMgPCAzNjAwKSB7CiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApOwogICAgcmV0dXJuIG1pbnV0ZXMgPiAxID8gbWludXRlcyArICcgbWludXRlcyBhZ28nIDogJzEgbWludXRlIGFnbyc7CiAgfQogIGlmIChzZWNvbmRzIDwgODY0MDApIHsKICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7CiAgICByZXR1cm4gaG91cnMgPiAxID8gaG91cnMgKyAnIGhvdXJzIGFnbycgOiAnMSBob3VyIGFnbyc7CiAgfQoKICBjb25zdCBkYXlzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gODY0MDApOwoKICBpZiAoZGF5cyA8IDMwKSB7CiAgICByZXR1cm4gZGF5cyA+IDEgPyBkYXlzICsgJyBkYXlzIGFnbycgOiAnMSBkYXkgYWdvJzsKICB9CiAgaWYgKGRheXMgPCAzNjApIHsKICAgIGNvbnN0IG1vbnRocyA9IE1hdGguZmxvb3IoZGF5cyAvIDMwKTsKICAgIHJldHVybiBtb250aHMgPiAxID8gbW9udGhzICsgJyBtb250aHMgYWdvJyA6ICcxIG1vbnRoIGFnbyc7CiAgfQoKICBjb25zdCB5ZWFycyA9IE1hdGguZmxvb3IoZGF5cyAvIDM2NSk7CiAgcmV0dXJuIHllYXJzID4gMSA/IHllYXJzICsgJyB5ZWFycyBhZ28nIDogJzEgeWVhciBhZ28nOwp9CgoKCmZ1bmN0aW9uIHJlbW92ZVBvc3RzKCkgewogIGNvbnN0IHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFjdGl2ZSB2aWRlbycpOwogIGlmICh2aWRlbyAhPT0gbnVsbCkgewogICAgdmlkZW8ucGF1c2UoKTsKICAgIHZpZGVvLnJlbW92ZUF0dHJpYnV0ZSgnc3JjJyk7CiAgICB2aWRlby5sb2FkKCk7CiAgfQogIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3N0JykuZm9yRWFjaChwb3N0ID0+IHsKICAgIHBvc3QucXVlcnlTZWxlY3RvcignLm1lZGlhJykucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTsKICAgIHBvc3QucmVtb3ZlKCk7CiAgfSk7Cn0KCgoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkgewogIGxldCBwID0gMDsgICAgICAgICAgICAgIC8vIHBvc3QgaW5kZXgKICBsZXQgbWF4SW5kZXggPSAtMTsgICAgICAvLyBtYXggcG9zdCBpbmRleAogIGxldCB0cmlnZ2VySW5kZXggPSAwOyAgIC8vIGZldGNoIG5ldyBwb3N0cyB3aGVuIHRoaXMgaW5kZXggaXMgYWN0aXZlCiAgbGV0IGFmdGVyID0gJyc7CiAgbGV0IG5zZncgPSBmYWxzZTsKICBsZXQgdXJsID0gJyc7CgogIGNvbnN0IHByZXZCdXR0b24gID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByZXYtYnV0dG9uJyk7CiAgY29uc3QgbmV4dEJ1dHRvbiAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV4dC1idXR0b24nKTsKICBjb25zdCBjb3VudGVyRWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb3VudGVyJyk7CiAgY29uc3QgZmV0Y2hTcGlubmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZldGNoLXNwaW5uZXInKTsKCiAgY29uc3QgaG9tZVBhZ2UgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG9tZScpOwogIGNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsb3NlLWJ1dHRvbicpOwogIGNvbnN0IGhvbWVBcmVhICAgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWUtYXJlYScpOwogIGNvbnN0IGhvbWVCdXR0b24gID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWUtYnV0dG9uJyk7CiAgY29uc3QgZXJyb3JFbGVtICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG9tZS1lcnJvcicpOwoKICBjb25zdCBwYXN0TWVudSAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYXN0LW1lbnUnKTsKICBjb25zdCBpbnB1dEVsZW0gICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdWJyZWRkaXQtaW5wdXQnKTsKICBjb25zdCBpbnB1dEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1idXR0b24nKTsKICBjb25zdCBpbnB1dFNwaW5uZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtc3Bpbm5lcicpOwogIGNvbnN0IGlucHV0QXJyb3cgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1hcnJvdycpOwoKICAvLyBjaGVjayBpZiBITFMgdmlkZW9zIGFyZSBzdXBwb3J0ZWQKICBpZiAoIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJykuY2FuUGxheVR5cGUoJ2FwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVnVVJMJykpIHsKICAgIGVycm9yRWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgIGVycm9yRWxlbS5pbm5lckhUTUwgPSAnRXJyb3I6IFRoaXMgYnJvd3NlciBpcyBub3Qgb2ZmaWNpYWxseSBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgU2FmYXJpIGluc3RlYWQuJzsKICB9CgoKICBmdW5jdGlvbiBsb2FkUG9zdChpKSB7CiAgICBjb25zdCBwb3N0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3N0Jyk7CgogICAgaWYgKGkgPCAwIHx8IGkgPj0gcG9zdHMubGVuZ3RoKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBmZXRjaCBuZXcgcG9zdHMgb24gdHJpZ2dlcgogICAgaWYgKGkgPT09IHRyaWdnZXJJbmRleCAmJiBhZnRlciAhPT0gbnVsbCkgewogICAgICAgIGZldGNoU3Bpbm5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgICBmZXRjaCh1cmwgKyAnJmFmdGVyPScgKyBhZnRlcikKICAgICAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC5vayA/IHJlc3AuanNvbigpIDogbnVsbCkKICAgICAgICAgIC50aGVuKGpzb24gPT4gewogICAgICAgICAgICAgIGlmIChqc29uID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnN0IG5leHRQb3N0cyA9IGNyZWF0ZVBvc3RzKGpzb25bJ2RhdGEnXVsnY2hpbGRyZW4nXSk7CiAgICAgICAgICAgICAgaWYgKG5leHRQb3N0cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIC8vIG5vIGltYWdlcy92aWRlb3MgZm91bmQsIHN0b3AgaGVyZQogICAgICAgICAgICAgICAgYWZ0ZXIgPSBudWxsOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCguLi5uZXh0UG9zdHMpOwoKICAgICAgICAgICAgICBhZnRlciA9IGpzb25bJ2RhdGEnXVsnYWZ0ZXInXTsKICAgICAgICAgICAgICB0cmlnZ2VySW5kZXggPSBwb3N0cy5sZW5ndGggKyBNYXRoLm1heCgwLCBuZXh0UG9zdHMubGVuZ3RoIC0gNSk7CgogICAgICAgICAgICAgIG5leHRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgICAgICAgICAgY291bnRlckVsZW0udGV4dENvbnRlbnQgPSBwKzEgKyAnLycgKyAocG9zdHMubGVuZ3RoICsgbmV4dFBvc3RzLmxlbmd0aCk7CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpCiAgICAgICAgICAuZmluYWxseSgoKSA9PiBmZXRjaFNwaW5uZXIuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJykpOwogICAgfQoKICAgIC8vIHJlbW92ZSBjdXJyZW50IHZpZGVvIGZyb20gbWVtb3J5CiAgICBjb25zdCB2aWRlbyA9IHBvc3RzW3BdLnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvJyk7CiAgICBpZiAodmlkZW8gIT09IG51bGwpIHsKICAgICAgdmlkZW8ucGF1c2UoKTsKICAgICAgdmlkZW8ucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTsKICAgICAgdmlkZW8ubG9hZCgpOwogICAgICB2aWRlby5yZW1vdmVBdHRyaWJ1dGUoJ3dpZHRoJyk7CiAgICB9CgogICAgcG9zdHNbcF0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7CiAgICBwID0gaTsKICAgIHBvc3RzW3BdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpOwoKICAgIGlmICghbnNmdykgewogICAgICBpZiAocG9zdHNbcF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdvdmVyMTgnKSkgewogICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnbnNmdycpOwogICAgICB9IGVsc2UgewogICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbnNmdycpOwogICAgICB9CiAgICB9CgogICAgLy8gbG9hZCBuZXh0IG1lZGlhCiAgICBjb25zdCBtZWRpYSA9IHBvc3RzW3BdLnF1ZXJ5U2VsZWN0b3IoJy5tZWRpYScpOwogICAgbWVkaWEuc3JjID0gbWVkaWEuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpOwoKICAgIGlmIChtZWRpYS5sb2NhbE5hbWUgPT09ICd2aWRlbycpIHsKICAgICAgLy8gc3RvcCB2aWRlbyBjb250cm9scyBmcm9tIGdsaXRjaGluZyAKICAgICAgbWVkaWEud2lkdGggPSBtZWRpYS5jbGllbnRXaWR0aDsKICAgIH0KCiAgICAvLyBwcmVsb2FkIHBvc3RzCiAgICBpZiAocCA+IG1heEluZGV4KSB7CiAgICAgIG1heEluZGV4ID0gcDsKCiAgICAgIGZvciAobGV0IGogPSBwKzE7IGogPCBNYXRoLm1pbihwb3N0cy5sZW5ndGgsIHArNSk7IGorKykgewogICAgICAgIGNvbnN0IG1lZGlhID0gcG9zdHNbal0ucXVlcnlTZWxlY3RvcignLm1lZGlhJyk7CiAgICAgICAgbWVkaWEuc3JjID0gbWVkaWEuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpOwogICAgICB9CiAgICB9CgogICAgcHJldkJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgIG5leHRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CgogICAgaWYgKHAgPT09IDApIHsKICAgICAgcHJldkJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTsKICAgIH0KICAgIGlmIChwID09PSBwb3N0cy5sZW5ndGgtMSkgewogICAgICBuZXh0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpOwogICAgfQoKICAgIGNvdW50ZXJFbGVtLnRleHRDb250ZW50ID0gcCsxICsgJy8nICsgcG9zdHMubGVuZ3RoOwogIH0KCgoKICBmdW5jdGlvbiBwcmV2UG9zdCgpIHsgbG9hZFBvc3QocC0xKSB9CiAgZnVuY3Rpb24gbmV4dFBvc3QoKSB7IGxvYWRQb3N0KHArMSkgfQoKCgogIGZ1bmN0aW9uIHNlYXJjaCgpIHsKICAgIGNvbnN0IHBhdHRlcm4gPSAvXlthLXpBLVowLTldW2EtekEtWjAtOV9dezIsMjB9JC87CiAgICBsZXQgaW5wdXQgPSBpbnB1dEVsZW0udmFsdWUudHJpbSgpOwogICAgaW5wdXRFbGVtLmJsdXIoKTsKCiAgICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICghcGF0dGVybi50ZXN0KGlucHV0KSkgewogICAgICBlcnJvckVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgIGVycm9yRWxlbS5pbm5lckhUTUwgPSAnRXJyb3I6IEludmFsaWQgc3VicmVkZGl0IG5hbWUuJzsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlucHV0U3Bpbm5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgIGlucHV0QXJyb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKCiAgICBjb25zdCBpbml0VVJMID0gYGh0dHBzOi8vYXBpLnJlZGRpdC5jb20vci8ke2lucHV0fS90b3AuanNvbj90PSR7cGFzdE1lbnUudmFsdWV9JmxpbWl0PTI1YDsKCiAgICBmZXRjaChpbml0VVJMKQogICAgICAudGhlbihyZXNwID0+IHJlc3Aub2sgPyByZXNwLmpzb24oKSA6IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcigpKSkKICAgICAgLnRoZW4oanNvbiA9PiB7CiAgICAgICAgY29uc3QgcG9zdHMgPSBjcmVhdGVQb3N0cyhqc29uWydkYXRhJ11bJ2NoaWxkcmVuJ10pOwogICAgICAgIGlmIChwb3N0cy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpOwogICAgICAgIH0KCiAgICAgICAgcmVtb3ZlUG9zdHMoKTsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCguLi5wb3N0cyk7CgogICAgICAgIC8vIHJlc2V0IHN0YXRlCiAgICAgICAgcCA9IDA7CiAgICAgICAgbWF4SW5kZXggPSAtMTsKICAgICAgICB0cmlnZ2VySW5kZXggPSBNYXRoLm1heCgwLCBwb3N0cy5sZW5ndGggLSA1KTsKICAgICAgICBhZnRlciA9IGpzb25bJ2RhdGEnXVsnYWZ0ZXInXTsKICAgICAgICB1cmwgPSBpbml0VVJMOwoKICAgICAgICBob21lUGFnZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIGNsb3NlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgIGhvbWVBcmVhLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgIGVycm9yRWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwoKICAgICAgICBkb2N1bWVudC50aXRsZSA9IGBydG9wICR7aW5wdXR9ICR7cGFzdE1lbnUudmFsdWUgIT09ICdhbGwnID8gJ3Bhc3QgJyArIHBhc3RNZW51LnZhbHVlIDogJ2FsbC10aW1lJ31gOwoKICAgICAgICBsb2FkUG9zdCgwKTsKICAgICAgfSkKICAgICAgLmNhdGNoKF8gPT4gewogICAgICAgIGVycm9yRWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHsKICAgICAgICAgIGVycm9yRWxlbS5pbm5lckhUTUwgPSAnRXJyb3I6IFlvdXIgaW50ZXJuZXQgY29ubmVjdGlvbiBhcHBlYXJzIHRvIGJlIG9mZmxpbmUuIFBsZWFzZSByZWNvbm5lY3QgYW5kIHRyeSBhZ2Fpbi4nOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlcnJvckVsZW0uaW5uZXJIVE1MID0gJ0Vycm9yOiBVbmFibGUgdG8gbG9hZCBzdWJyZWRkaXQgZGF0YS4gUGxlYXNlIHRyeSBhZ2FpbiBvciB0cnkgYSBkaWZmZXJlbnQgc3VicmVkZGl0Lic7CiAgICAgICAgfQogICAgICB9KQogICAgICAuZmluYWxseSgoKSA9PiB7CiAgICAgICAgaW5wdXRTcGlubmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgaW5wdXRBcnJvdy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgfSk7CiAgfQoKICAvLyBFdmVudCBsaXN0ZW5lcnMKCiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4gewogICAgaWYgKGhvbWVQYWdlLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykgewogICAgICBpZiAoZS5rZXlDb2RlID09PSAzNykgewogICAgICAgIHByZXZQb3N0KCk7CiAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAzOSkgeyAKICAgICAgICBuZXh0UG9zdCgpOwogICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzIgJiYgIWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCduc2Z3JykpIHsKICAgICAgICBjb25zdCB2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUgdmlkZW8nKTsKICAgICAgICBpZiAodmlkZW8gIT09IG51bGwpIHsKICAgICAgICAgIHZpZGVvLnBhdXNlZCA/IHZpZGVvLnBsYXkoKSA6IHZpZGVvLnBhdXNlKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSk7CgogIHByZXZCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcmV2UG9zdCk7CiAgbmV4dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5leHRQb3N0KTsKCiAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBob21lUGFnZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnKTsKICBob21lQXJlYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGhvbWVQYWdlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScpOwogIGhvbWVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBob21lUGFnZS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnKTsKCiAgaW5wdXRFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHsKICAgIGlmIChlLnRhcmdldC52YWx1ZS5sZW5ndGggPiAwKSB7CiAgICAgIGlucHV0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2JsdWUtYnV0dG9uJyk7CiAgICB9IGVsc2UgewogICAgICBpbnB1dEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdibHVlLWJ1dHRvbicpOwogICAgfQogIH0pOwoKICBpbnB1dEVsZW0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7IGlmIChlLmtleUNvZGUgPT09IDEzKSBzZWFyY2goKSB9KTsKICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZWFyY2gpOwoKICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubnNmdy1iYW5uZXIgYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ25zZncnKTsKICAgIG5zZncgPSB0cnVlOwogIH0pOwp9KTsKPC9zY3JpcHQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPG5vc2NyaXB0PgogICAgICA8c3Bhbj5QbGVhc2UgZW5hYmxlIEphdmFTY3JpcHQgdG8gdXNlIHRoaXMgd2Vic2l0ZS48L3NwYW4+CiAgICA8L25vc2NyaXB0PgogICAgPGRpdiBjbGFzcz0iaG9tZSI+CiAgICAgIDxzdmcgY2xhc3M9ImNsb3NlLWJ1dHRvbiBzdmctYnV0dG9uIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIiBmaWxsPSJub25lIiBzdHJva2U9ImN1cnJlbnRDb2xvciIgc3Ryb2tlLXdpZHRoPSIyIiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiPgogICAgICAgIDxwYXRoIGQ9Ik0xOCA2TDYgMThNNiA2bDEyIDEyIj48L3BhdGg+CiAgICAgIDwvc3ZnPgogICAgICA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vbmlja3JqL3J0b3AiPgogICAgICAgIDxzdmcgcm9sZT0iaW1nIiBjbGFzcz0iZ2l0aHViLWljb24gc3ZnLWJ1dHRvbiIgdmlld0JveD0iMCAwIDI0IDI0IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogICAgICAgICAgPHBhdGggZmlsbD0id2hpdGUiIGQ9Ik0xMiAuMjk3Yy02LjYzIDAtMTIgNS4zNzMtMTIgMTIgMCA1LjMwMyAzLjQzOCA5LjggOC4yMDUgMTEuMzg1LjYuMTEzLjgyLS4yNTguODItLjU3NyAwLS4yODUtLjAxLTEuMDQtLjAxNS0yLjA0LTMuMzM4LjcyNC00LjA0Mi0xLjYxLTQuMDQyLTEuNjFDNC40MjIgMTguMDcgMy42MzMgMTcuNyAzLjYzMyAxNy43Yy0xLjA4Ny0uNzQ0LjA4NC0uNzI5LjA4NC0uNzI5IDEuMjA1LjA4NCAxLjgzOCAxLjIzNiAxLjgzOCAxLjIzNiAxLjA3IDEuODM1IDIuODA5IDEuMzA1IDMuNDk1Ljk5OC4xMDgtLjc3Ni40MTctMS4zMDUuNzYtMS42MDUtMi42NjUtLjMtNS40NjYtMS4zMzItNS40NjYtNS45MyAwLTEuMzEuNDY1LTIuMzggMS4yMzUtMy4yMi0uMTM1LS4zMDMtLjU0LTEuNTIzLjEwNS0zLjE3NiAwIDAgMS4wMDUtLjMyMiAzLjMgMS4yMy45Ni0uMjY3IDEuOTgtLjM5OSAzLS40MDUgMS4wMi4wMDYgMi4wNC4xMzggMyAuNDA1IDIuMjgtMS41NTIgMy4yODUtMS4yMyAzLjI4NS0xLjIzLjY0NSAxLjY1My4yNCAyLjg3My4xMiAzLjE3Ni43NjUuODQgMS4yMyAxLjkxIDEuMjMgMy4yMiAwIDQuNjEtMi44MDUgNS42MjUtNS40NzUgNS45Mi40Mi4zNi44MSAxLjA5Ni44MSAyLjIyIDAgMS42MDYtLjAxNSAyLjg5Ni0uMDE1IDMuMjg2IDAgLjMxNS4yMS42OS44MjUuNTdDMjAuNTY1IDIyLjA5MiAyNCAxNy41OTIgMjQgMTIuMjk3YzAtNi42MjctNS4zNzMtMTItMTItMTIiLz4KICAgICAgICA8L3N2Zz4KICAgICAgPC9hPgogICAgICA8ZGl2IGNsYXNzPSJob21lLXBvcHVwIj4KICAgICAgICA8aDEgY2xhc3M9ImxvZ28iPnJ0b3A8L2gxPgogICAgICAgIDxoMiBjbGFzcz0iZGVzY3JpcHRpb24iPkJyb3dzZSB0aGUgdG9wIGltYWdlcyAmIHZpZGVvcyBvbiBhbnkgc3VicmVkZGl0PC9oMj4KICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1jb250YWluZXIiPgogICAgICAgICAgPGlucHV0IGNsYXNzPSJzdWJyZWRkaXQtaW5wdXQiIHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSJzdWJyZWRkaXQiIGF1dG9mb2N1cz0iIj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImlucHV0LWJ1dHRvbiI+CiAgICAgICAgICAgIDxzdmcgY2xhc3M9ImlucHV0LXNwaW5uZXIiIHdpZHRoPSIyMCIgaGVpZ2h0PSIyMCIgdmlld0JveD0iMCAwIDI0IDI0IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogICAgICAgICAgICAgIDxwYXRoIGQ9Ik0xMC4xNCwxLjE2YTExLDExLDAsMCwwLTksOC45MkExLjU5LDEuNTksMCwwLDAsMi40NiwxMiwxLjUyLDEuNTIsMCwwLDAsNC4xMSwxMC43YTgsOCwwLDAsMSw2LjY2LTYuNjFBMS40MiwxLjQyLDAsMCwwLDEyLDIuNjloMEExLjU3LDEuNTcsMCwwLDAsMTAuMTQsMS4xNloiPjwvcGF0aD4KICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICAgIDxzdmcgY2xhc3M9ImlucHV0LWFycm93IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNSIgaGVpZ2h0PSIyNSIgdmlld0JveD0iMCAwIDUwIDUwIj4gICAKICAgICAgICAgICAgICA8cGF0aCBkPSJNMTUsMTAgTDM1LDI1IEwxNSw0MCIgc3Ryb2tlPSJibGFjayIgc3Ryb2tlLXdpZHRoPSI0IiBmaWxsPSJub25lIiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiPjwvcGF0aD4KICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8c2VsZWN0IGNsYXNzPSJwYXN0LW1lbnUiIG5hbWU9Im1lbnUiPgogICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iaG91ciI+cGFzdCBob3VyPC9vcHRpb24+CiAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkYXkiIHNlbGVjdGVkPnBhc3QgZGF5PC9vcHRpb24+CiAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ3ZWVrIj5wYXN0IHdlZWs8L29wdGlvbj4KICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im1vbnRoIj5wYXN0IG1vbnRoPC9vcHRpb24+CiAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ5ZWFyIj5wYXN0IHllYXI8L29wdGlvbj4KICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImFsbCI+YWxsLXRpbWU8L29wdGlvbj4KICAgICAgICA8L3NlbGVjdD4KICAgICAgICA8cCBjbGFzcz0iaG9tZS1lcnJvciI+PC9wPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iaG9tZS1hcmVhIj48L2Rpdj4KICAgIDwvZGl2PgogICAgPHN2ZyBjbGFzcz0iaG9tZS1idXR0b24gc3ZnLWJ1dHRvbiIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMjQgMjQiIGZpbGw9Im5vbmUiIHN0cm9rZT0iY3VycmVudENvbG9yIiBzdHJva2Utd2lkdGg9IjIiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCI+CiAgICAgIDxwYXRoIGQ9Ik0zIDEyaDE4TTMgNmgxOE0zIDE4aDE4Ij48L3BhdGg+IAogICAgPC9zdmc+CiAgICA8ZGl2IGNsYXNzPSJuc2Z3LWJhbm5lciI+CiAgICAgIDxoMT5XYXJuaW5nOiB0aGlzIHBvc3QgaXMgTlNGVzwvaDE+CiAgICAgIDxidXR0b24+SSdtIG92ZXIgMTg8L2J1dHRvbj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icHJldi1idXR0b24gaGlkZGVuIHN2Zy1idXR0b24iPgogICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgaGVpZ2h0PSI0MCIgdmlld0JveD0iMCAwIDEwIDE1Ij4KICAgICAgICA8cGF0aCBkPSJNNyAxbC02IDYgNiA2IiBzdHJva2U9IndoaXRlIiBzdHJva2Utd2lkdGg9IjEiIGZpbGw9Im5vbmUiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCI+PC9wYXRoPgogICAgICA8L3N2Zz4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ibmV4dC1idXR0b24gaGlkZGVuIHN2Zy1idXR0b24iPgogICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgaGVpZ2h0PSI0MCIgdmlld0JveD0iMCAwIDExIDE1Ij4KICAgICAgICA8cGF0aCBkPSJNMyAxbDYgNi02IDYiIHN0cm9rZT0id2hpdGUiIHN0cm9rZS13aWR0aD0iMSIgZmlsbD0ibm9uZSIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIj48L3BhdGg+CiAgICAgIDwvc3ZnPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb3VudGVyLWNvbnRhaW5lciI+CiAgICAgIDxzdmcgY2xhc3M9ImZldGNoLXNwaW5uZXIgaGlkZGVuIiB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIHZpZXdCb3g9IjAgMCAyNCAyNCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KICAgICAgICA8cGF0aCBkPSJNMTAuMTQsMS4xNmExMSwxMSwwLDAsMC05LDguOTJBMS41OSwxLjU5LDAsMCwwLDIuNDYsMTIsMS41MiwxLjUyLDAsMCwwLDQuMTEsMTAuN2E4LDgsMCwwLDEsNi42Ni02LjYxQTEuNDIsMS40MiwwLDAsMCwxMiwyLjY5aDBBMS41NywxLjU3LDAsMCwwLDEwLjE0LDEuMTZaIj48L3BhdGg+CiAgICAgIDwvc3ZnPgogICAgICA8cCBjbGFzcz0iY291bnRlciI+PC9wPgogICAgPC9kaXY+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==